---
- name: Gather host facts to get ansible_os_family
  setup:
    gather_subset: '!all'
    filter: ansible_*

- name: Pre-define firewall-running flags (defaults)
  ansible.builtin.set_fact:
    firewalld_running: false
    ufw_running: false

- name: Collect service facts
  ansible.builtin.service_facts:

- name: Check if firewalld is running (RedHat)
  ansible.builtin.set_fact:
    firewalld_running: "{{ ansible_facts.services['firewalld.service']['state'] == 'running' }}"
  when:
    - ansible_os_family == "RedHat"
    - "'firewalld.service' in ansible_facts.services"

- name: Debug message if firewalld is not running (RedHat)
  ansible.builtin.debug:
    msg: "Firewalld service is not running, skip configuration."
  when:
    - ansible_os_family == "RedHat"
    - not firewalld_running

- name: Check UFW status via command (Debian)
  ansible.builtin.command: ufw status
  register: ufw_status
  changed_when: false
  when: ansible_os_family == "Debian"

- name: Check if UFW is running (Debian)
  ansible.builtin.set_fact:
    ufw_running: "{{ 'Status: active' in ufw_status.stdout }}"
  when: ansible_os_family == "Debian"

- name: Debug message if UFW is not running (Debian)
  ansible.builtin.debug:
    msg: "Ufw service is not running, skip configuration."
  when:
    - ansible_os_family == "Debian"
    - not ufw_running

- name: Set rules for 'RedHat' family - public service
  ansible.builtin.shell:
    cmd: "firewall-cmd --permanent --zone=public --add-service=http --add-service=https"
  when:
    - ansible_os_family == 'RedHat'
    - firewalld_running

- name: Set rules for 'RedHat' family - public port
  ansible.builtin.shell:
    cmd: "firewall-cmd --permanent --zone=public --add-port={{ kube_apiserver_node_port_range }}/{tcp,udp}
      --add-port={{ loadbalancer_apiserver_port }}/tcp"
  become: true
  when:
    - ansible_os_family == 'RedHat'
    - firewalld_running

- name: Set rules for 'RedHat' family - internal subset
  ansible.builtin.shell:
    cmd: "firewall-cmd --permanent --zone=trusted --add-source={{ item }}"
  become: true
  when:
    - ansible_os_family == 'RedHat'
    - firewalld_running
  with_items:
    - "{{ kube_service_addresses }}"
    - "{{ kube_pods_subnet }}"

- name: Set rules for 'RedHat' family - hosts
  ansible.builtin.shell:
    cmd: "firewall-cmd --permanent --zone=trusted
      --add-source={{ hostvars[item]['ip'] if hostvars[item]['ip'] is defined else hostvars[item]['ansible_host'] }}"
  become: true
  when:
    - ansible_os_family == 'RedHat'
    - firewalld_running
  with_items: "{{ groups['all'] }}"

- name: Set rules for 'RedHat' family - reload
  ansible.builtin.shell:
    cmd: "firewall-cmd --reload"
  become: true
  when:
    - ansible_os_family == 'RedHat'
    - firewalld_running

- name: Set rules for 'Debian' family - public
  ansible.builtin.shell:
    cmd: "ufw allow http && ufw allow https
      && ufw allow {{ kube_apiserver_node_port_range | replace('-',':') }}/tcp
      && ufw allow {{ kube_apiserver_node_port_range | replace('-',':') }}/udp
      && ufw allow {{ loadbalancer_apiserver_port }}/tcp"
  become: true
  when:
    - ansible_os_family == 'Debian'
    - ufw_running

- name: Set rules for 'Debian' family - internal subset
  ansible.builtin.shell:
    cmd: "ufw allow from {{ item }}"
  become: true
  when:
    - ansible_os_family == 'Debian'
    - ufw_running
  with_items:
    - "{{ kube_service_addresses }}"
    - "{{ kube_pods_subnet }}"

- name: Set rules for 'Debian' family - hosts
  ansible.builtin.shell:
    cmd: "ufw allow from {{ hostvars[item]['ip'] if hostvars[item]['ip'] is defined else hostvars[item]['ansible_host'] }}"
  become: true
  when:
    - ansible_os_family == 'Debian'
    - ufw_running
  with_items: "{{ groups['all'] }}"
